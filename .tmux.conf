set -ga terminal-overrides ",xterm-256color*:Tc"
set -s escape-time 0

unbind C-b
set -g prefix C-Space
# set-option -g prefix C-a
bind-key C-a send-prefix
# set -g status-style 'bg=#333333 fg=#5eacd3'

bind r source-file ~/.tmux.conf

# set the first window to 1 instead. To stay consistent, let’s do the same with the panes
set -g base-index 1
set-window-option -g pane-base-index 1

# Being able to have thousands of lines of output history
set -g history-limit 100000

set -g mouse on

# v and h are not bound by default, but we never know in the next versions...
unbind v
unbind h

unbind % # Split vertically
unbind '"' # Split horizontally

bind v split-window -h -c "#{pane_current_path}"
bind h split-window -v -c "#{pane_current_path}"

# To navigate from pane to pane, you can use prefix key -> ARROW KEY by default, too
bind -n C-h select-pane -L
bind -n C-j select-pane -D
bind -n C-k select-pane -U
bind -n C-l select-pane -R

# Opening tmux Windows
unbind n  #DEFAULT KEY: Move to next window
unbind w  #DEFAULT KEY: change current window interactively

bind n command-prompt "rename-window '%%'"
bind w new-window -c "#{pane_current_path}"

# Use ctrl+u to go to the next window, and ctrl+i to go to the previous one, without using the prefix key
bind -n C-u previous-window
bind -n C-U next-window

# copy mode gives us the possibility to navigate in the termina, using Emacs or Vi key bindings.
set-window-option -g mode-keys vi

# Unsurprisingly, you can use copy mode to copy some content. But if you tried to copy terminal 
# outputs already from tmux with your mouse, you might be confused: it doesn’t really work.
#
# Indeed, tmux by default doesn’t copy anything in your system clipboard, but in one of its
# paste buffer. But, for convenience, I prefer using the system clipboard each time I copy
# something from the terminal. Let’s configure that now:
unbind -T copy-mode-vi Space; #Default for begin-selection
unbind -T copy-mode-vi Enter; #Default for copy-selection

bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xsel --clipboard"

# Integrate Your tmux With Vim
set -g -a terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

#### COLOUR (Solarized dark)

# default statusbar colors
set-option -g status-style fg=yellow,bg=black #yellow and base02

# default window title colors
set-window-option -g window-status-style fg=brightblue,bg=default #base0 and default
#set-window-option -g window-status-style dim

# active window title colors
set-window-option -g window-status-current-style fg=brightred,bg=default #orange and default
#set-window-option -g window-status-current-style bright

# pane border
set-option -g pane-border-style fg=black #base02
set-option -g pane-active-border-style fg=brightgreen #base01

# message text
set-option -g message-style fg=brightred,bg=black #orange and base01

# pane number display
set-option -g display-panes-active-colour brightred #orange
set-option -g display-panes-colour blue #blue

# clock
set-window-option -g clock-mode-colour green #green

# bell
set-window-option -g window-status-bell-style fg=black,bg=red #base02, red

# To have the ability to use Tab for autocomplete
unbind -n Tab

unbind C-t
bind -n C-t choose-tree
